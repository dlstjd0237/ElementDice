//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/00.Work/Baek/09.InputSystem/Console.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Console: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Console()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Console"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""022b0db0-4b99-44d1-80c7-a0602aa36152"",
            ""actions"": [
                {
                    ""name"": ""ESC"",
                    ""type"": ""Button"",
                    ""id"": ""fe169881-fa1d-4041-9500-f2d34683114d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiceListView"",
                    ""type"": ""Button"",
                    ""id"": ""78be2174-bb6e-46ae-b370-954750064e93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""433edb6c-0b8a-4f52-ac91-b75ee0de69a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9cb42d95-80c8-467b-85dd-df1dba7e1959"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9458c02b-d2aa-47b0-bb0d-54fc52c3537a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiceListView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57c84496-143d-406c-adde-fbccfa74506a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RunTime"",
            ""id"": ""cee0079d-f501-49bb-9446-94882025a919"",
            ""actions"": [
                {
                    ""name"": ""DiceRoll"",
                    ""type"": ""Button"",
                    ""id"": ""4c3c0b5b-7b15-4e3d-8e73-0220e33e00d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""994e954d-0e24-478d-a41b-11168b5e7ae1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiceRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ESC = m_UI.FindAction("ESC", throwIfNotFound: true);
        m_UI_DiceListView = m_UI.FindAction("DiceListView", throwIfNotFound: true);
        m_UI_LeftClick = m_UI.FindAction("LeftClick", throwIfNotFound: true);
        // RunTime
        m_RunTime = asset.FindActionMap("RunTime", throwIfNotFound: true);
        m_RunTime_DiceRoll = m_RunTime.FindAction("DiceRoll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ESC;
    private readonly InputAction m_UI_DiceListView;
    private readonly InputAction m_UI_LeftClick;
    public struct UIActions
    {
        private @Console m_Wrapper;
        public UIActions(@Console wrapper) { m_Wrapper = wrapper; }
        public InputAction @ESC => m_Wrapper.m_UI_ESC;
        public InputAction @DiceListView => m_Wrapper.m_UI_DiceListView;
        public InputAction @LeftClick => m_Wrapper.m_UI_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ESC.started += instance.OnESC;
            @ESC.performed += instance.OnESC;
            @ESC.canceled += instance.OnESC;
            @DiceListView.started += instance.OnDiceListView;
            @DiceListView.performed += instance.OnDiceListView;
            @DiceListView.canceled += instance.OnDiceListView;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ESC.started -= instance.OnESC;
            @ESC.performed -= instance.OnESC;
            @ESC.canceled -= instance.OnESC;
            @DiceListView.started -= instance.OnDiceListView;
            @DiceListView.performed -= instance.OnDiceListView;
            @DiceListView.canceled -= instance.OnDiceListView;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // RunTime
    private readonly InputActionMap m_RunTime;
    private List<IRunTimeActions> m_RunTimeActionsCallbackInterfaces = new List<IRunTimeActions>();
    private readonly InputAction m_RunTime_DiceRoll;
    public struct RunTimeActions
    {
        private @Console m_Wrapper;
        public RunTimeActions(@Console wrapper) { m_Wrapper = wrapper; }
        public InputAction @DiceRoll => m_Wrapper.m_RunTime_DiceRoll;
        public InputActionMap Get() { return m_Wrapper.m_RunTime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunTimeActions set) { return set.Get(); }
        public void AddCallbacks(IRunTimeActions instance)
        {
            if (instance == null || m_Wrapper.m_RunTimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunTimeActionsCallbackInterfaces.Add(instance);
            @DiceRoll.started += instance.OnDiceRoll;
            @DiceRoll.performed += instance.OnDiceRoll;
            @DiceRoll.canceled += instance.OnDiceRoll;
        }

        private void UnregisterCallbacks(IRunTimeActions instance)
        {
            @DiceRoll.started -= instance.OnDiceRoll;
            @DiceRoll.performed -= instance.OnDiceRoll;
            @DiceRoll.canceled -= instance.OnDiceRoll;
        }

        public void RemoveCallbacks(IRunTimeActions instance)
        {
            if (m_Wrapper.m_RunTimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunTimeActions instance)
        {
            foreach (var item in m_Wrapper.m_RunTimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunTimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunTimeActions @RunTime => new RunTimeActions(this);
    public interface IUIActions
    {
        void OnESC(InputAction.CallbackContext context);
        void OnDiceListView(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
    public interface IRunTimeActions
    {
        void OnDiceRoll(InputAction.CallbackContext context);
    }
}
